// Generated by CoffeeScript 1.7.1
(function() {
  var encodeHeaders, filterHeaders, fs, http, net, options, server, spdy, url;

  fs = require('fs');

  spdy = require('spdy');

  http = require('http');

  net = require('net');

  url = require('url');

  encodeHeaders = function(headers) {
    var k, newHeaders, v;
    newHeaders = {};
    for (k in headers) {
      v = headers[k];
      k = k.toLowerCase();
      if (k === "transfer-encoding" || k === "connection" || k === 'content-encoding') {
        newHeaders["sp-" + k] = v;
      } else {
        newHeaders[k] = v;
      }
    }
    console.log(newHeaders);
    return newHeaders;
  };

  filterHeaders = function(headers) {
    var k, ks, newHeaders, newKs, sep, v, _i, _len;
    newHeaders = {};
    for (k in headers) {
      v = headers[k];
      ks = k.split('-');
      newKs = [];
      for (_i = 0, _len = ks.length; _i < _len; _i++) {
        sep = ks[_i];
        if (sep.length > 0) {
          sep = sep.charAt(0).toUpperCase() + sep.slice(1);
        }
        newKs.push(sep);
      }
      k = newKs.join('-');
      newHeaders[k] = v;
    }
    console.log(newHeaders);
    return newHeaders;
  };

  options = {
    ssl: false,
    plain: true,
    windowSize: 1024 * 1024,
    autoSpdy31: false
  };

  server = spdy.createServer(options, function(req, res) {
    var remoteReq, srvUrl;
    console.log('req');
    console.log(res);
    if (req.method.toLowerCase() === 'connect') {
      server.emit('connect', req, res.connection);
      return;
    }
    console.log(req.method);
    srvUrl = url.parse(req.url);
    console.log(srvUrl);
    return remoteReq = http.get({
      hostname: srvUrl.hostname,
      path: srvUrl.path,
      port: srvUrl.port || 80,
      headers: filterHeaders(req.headers),
      trailers: req.trailers,
      httpVersion: req.httpVersion
    }, function(remoteRes) {
      console.log('remote res');
      res.writeHead(remoteRes.statusCode, encodeHeaders(remoteRes.headers));
      res.on('data', function(chunk) {
        console.log('res on data');
        return remoteRes.write(chunk);
      });
      remoteRes.on('data', function(chunk) {
        console.log('remote res on data');
        console.log(chunk.length);
        return res.write(chunk);
      });
      return remoteRes.on('end', function() {
        console.log('remote res on end');
        return res.end();
      });
    });
  });

  server.on('connect', function(req, socket) {
    var srvSocket, srvUrl;
    console.log('connect');
    srvUrl = url.parse(req.url);
    return srvSocket = net.connect(srvUrl.port, srvUrl.hostname, function() {
      console.log('remote connect');
      socket.write('HTTP/1.1 200 Connection Established\r\n' + 'Proxy-agent: Spdy-Proxy\r\n' + '\r\n');
      srvSocket.pipe(socket);
      return socket.pipe(srvSocket);
    });
  });

  server.listen(1443);

}).call(this);
