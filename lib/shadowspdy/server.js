// Generated by CoffeeScript 1.7.1
(function() {
  var fs, http, inet, net, path, spdy, url, utils;

  fs = require('fs');

  spdy = require('spdy');

  http = require('http');

  net = require('net');

  url = require('url');

  path = require("path");

  utils = require("./utils");

  inet = require("./inet");

  exports.main = function() {
    var METHOD, SERVER, config, configContent, configFromArgs, configPath, connections, e, inetAton, inetNtoa, k, key, port, portPassword, timeout, v, _results;
    console.log(utils.version);
    inetNtoa = function(buf) {
      return buf[0] + "." + buf[1] + "." + buf[2] + "." + buf[3];
    };
    inetAton = function(ipStr) {
      var buf, i, parts;
      parts = ipStr.split(".");
      if (parts.length !== 4) {
        return null;
      } else {
        buf = new Buffer(4);
        i = 0;
        while (i < 4) {
          buf[i] = +parts[i];
          i++;
        }
        return buf;
      }
    };
    configFromArgs = utils.parseArgs();
    configPath = 'config.json';
    if (configFromArgs.config_file) {
      configPath = configFromArgs.config_file;
    }
    if (!fs.existsSync(configPath)) {
      configPath = path.resolve(__dirname, "config.json");
      if (!fs.existsSync(configPath)) {
        configPath = path.resolve(__dirname, "../../config.json");
        if (!fs.existsSync(configPath)) {
          configPath = null;
        }
      }
    }
    if (configPath) {
      utils.info('loading config from ' + configPath);
      configContent = fs.readFileSync(configPath);
      try {
        config = JSON.parse(configContent);
      } catch (_error) {
        e = _error;
        utils.error('found an error in config.json: ' + e.message);
        process.exit(1);
      }
    } else {
      config = {};
    }
    for (k in configFromArgs) {
      v = configFromArgs[k];
      config[k] = v;
    }
    if (config.verbose) {
      utils.config(utils.DEBUG);
    }
    utils.checkConfig(config);
    timeout = Math.floor(config.timeout * 1000) || 600000;
    portPassword = config.port_password;
    port = config.server_port;
    key = config.password;
    METHOD = config.method;
    SERVER = config.server;
    if (!(SERVER && (port || portPassword) && key)) {
      utils.warn('config.json not found, you have to specify all config in commandline');
      process.exit(1);
    }
    connections = 0;
    if (portPassword) {
      if (port || key) {
        utils.warn('warning: port_password should not be used with server_port and password. server_port and password will be ignored');
      }
    } else {
      portPassword = {};
      portPassword[port.toString()] = key;
    }
    _results = [];
    for (port in portPassword) {
      key = portPassword[port];
      _results.push((function() {
        var KEY, PORT, server, server_ip, servers, _i, _len;
        PORT = port;
        KEY = key;
        utils.info("calculating ciphers for port " + PORT);
        server = net.createServer(function(socket) {
          var conn;
          console.log('socket');
          conn = new spdy.Connection(socket, {
            isServer: true,
            client: false
          }, server);
          conn._setVersion(3.0);
          conn.on('error', function(err) {
            return console.error(err);
          });
          return conn.on('stream', function(stream) {
            var addrLen, cachedPieces, clean, headerLength, remote, remoteAddr, remotePort, stage;
            console.log('stream');
            connections += 1;
            stage = 0;
            headerLength = 0;
            remote = null;
            cachedPieces = [];
            addrLen = 0;
            remoteAddr = null;
            remotePort = null;
            utils.debug("connections: " + connections);
            clean = function() {
              utils.debug("clean");
              connections -= 1;
              remote = null;
              stream = null;
              return utils.debug("connections: " + connections);
            };
            stream.on("data", function(data) {
              var addrtype, buf;
              console.log(data.length);
              utils.log(utils.EVERYTHING, "connection on data");
              if (stage === 5) {
                if (!remote.write(data)) {
                  stream.pause();
                }
                return;
              }
              if (stage === 0) {
                try {
                  addrtype = data[0];
                  if (addrtype === void 0) {
                    return;
                  }
                  if (addrtype === 3) {
                    addrLen = data[1];
                  } else if (addrtype !== 1 && addrtype !== 4) {
                    utils.error("unsupported addrtype: " + addrtype + " maybe wrong password");
                    stream.destroy();
                    return;
                  }
                  if (addrtype === 1) {
                    remoteAddr = inetNtoa(data.slice(1, 5));
                    remotePort = data.readUInt16BE(5);
                    headerLength = 7;
                  } else if (addrtype === 4) {
                    remoteAddr = inet.inet_ntop(data.slice(1, 17));
                    remotePort = data.readUInt16BE(17);
                    headerLength = 19;
                  } else {
                    remoteAddr = data.slice(2, 2 + addrLen).toString("binary");
                    remotePort = data.readUInt16BE(2 + addrLen);
                    headerLength = 2 + addrLen + 2;
                  }
                  remote = net.connect(remotePort, remoteAddr, function() {
                    var i, piece;
                    utils.info("connecting " + remoteAddr + ":" + remotePort);
                    i = 0;
                    while (i < cachedPieces.length) {
                      piece = cachedPieces[i];
                      remote.write(piece);
                      i++;
                    }
                    cachedPieces = null;
                    stage = 5;
                    return utils.debug("stage = 5");
                  });
                  remote.on("data", function(data) {
                    utils.log(utils.EVERYTHING, "remote on data");
                    if (!stream.write(data)) {
                      return remote.pause();
                    }
                  });
                  remote.on("end", function() {
                    utils.debug("remote on end");
                    if (stream) {
                      return stream.end();
                    }
                  });
                  remote.on("error", function(e) {
                    utils.debug("remote on error");
                    return utils.error("remote " + remoteAddr + ":" + remotePort + " error: " + e);
                  });
                  remote.on("close", function(had_error) {
                    utils.debug("remote on close:" + had_error);
                    if (had_error) {
                      if (stream) {
                        return stream.destroy();
                      }
                    } else {
                      if (stream) {
                        return stream.end();
                      }
                    }
                  });
                  remote.on("drain", function() {
                    utils.debug("remote on drain");
                    if (stream) {
                      return stream.resume();
                    }
                  });
                  remote.setTimeout(timeout, function() {
                    utils.debug("remote on timeout");
                    if (remote) {
                      remote.destroy();
                    }
                    if (stream) {
                      return stream.destroy();
                    }
                  });
                  if (data.length > headerLength) {
                    buf = new Buffer(data.length - headerLength);
                    data.copy(buf, 0, headerLength);
                    cachedPieces.push(buf);
                    buf = null;
                  }
                  stage = 4;
                  return utils.debug("stage = 4");
                } catch (_error) {
                  e = _error;
                  utils.error(e);
                  stream.destroy();
                  if (remote) {
                    return remote.destroy();
                  }
                }
              } else {
                if (stage === 4) {
                  return cachedPieces.push(data);
                }
              }
            });
            stream.on("end", function() {
              utils.debug("connection on end");
              if (remote) {
                return remote.end();
              }
            });
            stream.on("error", function(e) {
              utils.debug("connection on error");
              return utils.error("local error: " + e);
            });
            stream.on("close", function(had_error) {
              utils.debug("connection on close:" + had_error);
              if (had_error) {
                if (remote) {
                  remote.destroy();
                }
              } else {
                if (remote) {
                  remote.end();
                }
              }
              return clean();
            });
            stream.on("drain", function() {
              utils.debug("connection on drain");
              if (remote) {
                return remote.resume();
              }
            });
            return stream.setTimeout(timeout, function() {
              utils.debug("connection on timeout");
              if (remote) {
                remote.destroy();
              }
              if (stream) {
                return stream.destroy();
              }
            });
          });
        });
        servers = SERVER;
        if (!(servers instanceof Array)) {
          servers = [servers];
        }
        for (_i = 0, _len = servers.length; _i < _len; _i++) {
          server_ip = servers[_i];
          server.listen(PORT, server_ip, function() {
            return utils.info("server listening at " + server_ip + ":" + PORT + " ");
          });
        }
        return server.on("error", function(e) {
          if (e.code === "EADDRINUSE") {
            utils.error("Address in use, aborting");
          } else {
            utils.error(e);
          }
          return process.stdout.on('drain', function() {
            return process.exit(1);
          });
        });
      })());
    }
    return _results;
  };

  if (require.main === module) {
    exports.main();
  }

}).call(this);
